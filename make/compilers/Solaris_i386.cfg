#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"@(#)Solaris_i386.cfg	9.5	07/10/08 SMI"
#

########
#
# Compiler (and tools) configuration for
#    SunOS5.0 ANSI C Compiler (SPARCworks 3.0)
#

# Additional target names (other than debug, profile)
TARGET_VARIANTS +=

#
# Stuff to clean and clobber for the compiler
#

CLEAN_CC = a.out *$(OBJ_EXT) *.tcov
CLOBBER_CC =

#
# Client compiler and support tools
#

CC=$(MLIB_CCHOME)/bin/cc
LINT=$(MLIB_CCHOME)/bin/lint
CC_OUTFILE= -o $@

#AS=/usr/ccs/bin/as
AS=$(CC)
asmc_i386 := AS_ALT=$(MLIB_ASHOME)/bin/gcc -c -m32 -fPIC
asmc_amd64 := AS_ALT=$(MLIB_ASHOME)/bin/gcc -c -m64 -fPIC
LD=$(CC) -V
NM=/usr/ccs/bin/nm
AR=/usr/ccs/bin/ar
LORDER = /usr/ccs/bin/lorder
TSORT  = /usr/ccs/bin/tsort
RANLIB = /usr/ccs/bin/ranlib

WAIT   = .WAIT

#
# Pre-processor defines.
# Local tailoring (on the command line) can be done by setting XCPPFLAGS
# which is never set in the Makefile's
#

DEFINES  = -Di386 $(MLIB_DEFINES) $(VERSION_DEFINES)
INCLUDES = -I$(TOP_DIR)/src/proto \
           -I$(TOP_DIR)/src/generic/stdc/include \
           -I$(TOP_DIR)/src/generic/stdc/sys/include \
           -I. -I../include


CPPFLAGS = $(XCPPFLAGS) $(DEFINES) $(INCLUDES)

#
# Local tailoring (on the command line) can be done by setting XCFLAGS
# which is never set in the Makefile's
#

#
# CFLAGS_OPTIMIZE_V, CFLAGS_DEBUG_V, CFLAGS_PROFILE_V are the values we
# would want the corresponding macros to be set to.
#
# CFLAGS_OPTIMIZE, CFLAGS_DEBUG, CFLAGS_PROFILE are set in the leaf
# Makefiles by the 'debug:' and 'profile:' targets to their _V values.
#

# default flags

VERSION_TARGET = 386

INLINE_sparc_V = $(TOP_DIR)/src/sparc/vis/vis/vis_32.il
INLINE_i386_V =

INLINE_i386_DEBUG = $(DIRS_SUNMATH)/libm.il

#CFLAGS_DEFAULT= -v -V -errwarn=%all -xc99=%none
CFLAGS_DEFAULT= -v -V -g $(CFLAGS_ERRORS)

# optimize flag: typically
CFLAGS_sparc_V9B     = -xtarget=ultra3cu -xarch=v9b -xprefetch=yes
CFLAGS_sparc_V9A     = -xtarget=ultra2 -xarch=v9a -xprefetch=yes
CFLAGS_sparc_V9      = -xtarget=ultra2 -xarch=v9 -xprefetch=yes
CFLAGS_sparc_V8PLUSB = -xtarget=ultra3cu -xarch=v8plusb -xprefetch=yes
CFLAGS_sparc_V8PLUSA = -xtarget=ultra2 -xarch=v8plusa -xprefetch=yes
CFLAGS_sparc_V8PLUS  = -xtarget=ultra2 -xarch=v8plus -xprefetch=yes
CFLAGS_sparc_V8      = -xtarget=generic -xarch=v8
CFLAGS_i386_V9B      = -xtarget=opteron -xarch=amd64
CFLAGS_i386_V9A      = -xtarget=opteron -xarch=amd64
CFLAGS_i386_V9       = -xtarget=opteron -xarch=amd64
CFLAGS_i386_V8PLUSB  = -xtarget=opteron -xarch=sse2
CFLAGS_i386_V8PLUSA  = -xtarget=opteron -xarch=sse
CFLAGS_i386_V8PLUS   = -xtarget=opteron -xarch=sse2
CFLAGS_i386_V8       = -xtarget=opteron -xarch=386

CFLAGS_CHIP_V= $(CFLAGS_$(TARCH)_V8)

#CFLAGS_OPTIMIZE_V= -fast -fsimple=1 -xO4 -xdepend -xrestrict=%all
CFLAGS_OPTIMIZE_V= -fast -fsimple=1 -xO4

# debug flag; typically -g
#CFLAGS_DEBUG_V=-g -W0,-xdbggen=off
CFLAGS_DEBUG_V=-g

# when debugging, optimize flag: typically empty
# some compilers do allow optimization with their "-g"
CFLAGS_DEBUG_OPTIMIZE_V=

# profile flag; use gprof(1)
CFLAGS_PROFILE_V=-xpg

# tcov flag
#CFLAGS_TCOV_V=-xa
CFLAGS_TCOV_V=-xprofile=tcov
CFLAGS_TCOV_OPTIMIZE_V=

# default is to optimize
CFLAGS_CHIP=$(CFLAGS_CHIP_V)
CFLAGS_OPTIMIZE=$(CFLAGS_OPTIMIZE_V)

# dynamic libraries
CFLAGS_DYNAMIC_V= -KPIC

CFLAGS_DYNAMIC = $(CFLAGS_DYNAMIC_V)

CFLAGS = $(CPPFLAGS) $(INLINE) $(CFLAGS_OPTIMIZE) $(CFLAGS_DEFAULT) $(CFLAGS_DEBUG) $(CFLAGS_PROFILE) $(CFLAGS_TCOV) $(CFLAGS_DYNAMIC) $(CFLAGS_CHIP) $(XCFLAGS)

#CFLAGS = $(CFLAGS_DEFAULT) $(CFLAGS_CHIP) $(CFLAGS_DEBUG) $(CFLAGS_PROFILE) $(CFLAGS_TCOV) $(CFLAGS_DYNAMIC) $(CFLAGS_INDEX) $(XCFLAGS)

ASFLAGS_DEFAULT= $(INCLUDES) -xarch=386 -V
ASFLAGS = $(ASFLAGS_DEFAULT) $(ASFLAGS_DYNAMIC)

# C++ library to link with
CPLUSPLUS_LIB=
CPLUSPLUS_LIBDIR=

# List of link files to include in -l option
LIB_c=-lc
LIB_m=-lm

DIRS_SUNMATH = $(MLIB_CCHOME)/lib

# libraries you want EVERYONE to link with
LD_LIBS= $(LIB_c) $(LIB_m)

# ld flag to ensure pure-text
LDFLAGS_MUST_BE_PURE_V = -z defs -z text

# ld flag for [un]shared objects
LDFLAGS_STATIC_LIBRARIES_V = -dn
LDFLAGS_SHARED_LIBRARIES_V = -fast

LDFLAGS_DYNAMIC_V = $(LDFLAGS_MUST_BE_PURE_V) -G
LDFLAGS_DYNAMIC_LIBNAME_V = -h $(DYNAMIC_VERSION_LIBNAME)

LDFLAGS_DYNAMIC = $(LDFLAGS_DYNAMIC_V) $(LDFLAGS_SHARED_LIBRARIES_V)

# ld flags for profiling, debugging
LDFLAGS_PROFILE_V =
LDFLAGS_TCOV_V = $(CFLAGS_TCOV_V)
LDFLAGS_DEBUG_V =

LDFLAGS= $(LDFLAGS_DYNAMIC) $(LDFLAGS_PROFILE) $(LDFLAGS_TCOV) $(LDFLAGS_DEBUG)

#
# rules/lib.cfg uses this so that the LIB rule is common for all platforms
#
LD_OUTFILE=-o $@
AR_OUTFILE= $@

#LD_LIB_ARGS=$(LDFLAGS) $(LD_LIBS) -h $(@F)
LD_LIB_ARGS= $(LD_LIBS) -h $(@F) $(MAP_FLAGS)
MAP_FLAGS = $(MAPFILES:%= -M %) -B reduce

# Lint flags
LINTFLAGS_DEFAULT	= -mnuxg -errchk=%all -errfmt=src -errhdr=%user -Ncheck=%all -Nlevel=4 -v -V

LINTFLAGS_i386_V9B     = -Xarch=v9
LINTFLAGS_i386_V9A     = -Xarch=v9
LINTFLAGS_i386_V9      = -Xarch=v9
LINTFLAGS_i386_V8PLUSA = -errchk=no%longptr64
LINTFLAGS_i386_V8PLUS  = -errchk=no%longptr64
LINTFLAGS_i386_V8      = -errchk=no%longptr64

LINTFLAGS_CHIP_V	= $(LINTFLAGS_$(TARCH)_V8)

LINTFLAGS		= $(LINTFLAGS_DEFAULT) $(LINTFLAGS_CHIP_V)

#
# How to compile stuff into ${ARCH} subdirectory
#
# NOTE: we override COMPILE.c
#

COMPILE.c=$(CC) $(CFLAGS) -c
#COMPILE.S=$(AS) $(ASFLAGS) -P $(ASCPPFLAGS) $(DEFINES)
COMPILE.S=$(COMPILE.c)
LINK.c=   $(LD) $(LDFLAGS) $(CFLAGS_CHIP)

OBJS            = $(SRCS:%.c= $(DIR_O)/%$(OBJ_EXT)) \
                  $(UTILS:%.c= $(DIR_O)/%$(OBJ_EXT)) \
                  $(SRCS_FP:%.c= $(DIR_O)/%$(OBJ_EXT)) \
                  $(SRCS_S:%.S= $(DIR_O)/%$(OBJ_EXT))
OBJS_ALT        = $(SRCS_ALT:%.c=$(DIR_O)/../$(ALT_MOD)/%$(OBJ_EXT))
OBJS_UTILS_ALT  = $(UTILS_ALT:%.c=$(DIR_O)/../$(ALT_UTILS_MOD)/%$(OBJ_EXT))

OBJS_STDC       = $(SRCS_STDC:%.c= $(DIR_O)/%$(OBJ_EXT)) \
                  $(UTILS_STDC:%.c= $(DIR_O)/%$(OBJ_EXT)) \
                  $(SRCS_STDC_FP:%.c= $(DIR_O)/%$(OBJ_EXT))

OBJS_STDC_ALT   = $(SRCS_STDC_ALT:%.c= $(DIR_O)/../$(STDC_ALT_MOD)/%$(OBJ_EXT))

ASM_OBJS        = $(SRCS:%.c= $(DIR_O_S)/%$(OBJ_EXT2)) \
                  $(UTILS:%.c= $(DIR_O_S)/%$(OBJ_EXT2)) \
                  $(SRCS_FP:%.c= $(DIR_O_S)/%$(OBJ_EXT2))

ASM_OBJS_ALT        = $(SRCS_ALT:%.c=$(DIR_O_S)/../$(ALT_MOD)/%$(OBJ_EXT2))

ASM_OBJS_UTILS_ALT  = $(UTILS_ALT:%.c=$(DIR_O_S)/../$(ALT_UTILS_MOD)/%$(OBJ_EXT2))

ASM_OBJS_STDC =   $(SRCS_STDC:%.c= $(DIR_O_S)/%$(OBJ_EXT2)) \
                  $(UTILS_STDC:%.c= $(DIR_O_S)/%$(OBJ_EXT2)) \
                  $(SRCS_STDC_FP:%.c= $(DIR_O_S)/%$(OBJ_EXT2))

ASM_OBJS_STDC_ALT = $(SRCS_STDC_ALT:%.c= $(DIR_O_S)/../$(STDC_ALT_MOD)/%$(OBJ_EXT2))

$(DIR_O)/%$(OBJ_EXT) : %.c
	$(COMPILE.c) $< $(CC_OUTFILE)

$(DIR_O)/%$(OBJ_EXT) : %.S
	$(COMPILE.S) $< $(CC_OUTFILE)

$(DIR_O) $(LIB_DIR) :
	@[ -d $@ ] || $(MKDIR) $@

$(DIR_O)/../$(ALT_MOD)/%$(OBJ_EXT) : $(ALT_DIR)/%.c
	@[ -d $(DIR_O)/../$(ALT_MOD) ] || $(MKDIR) $(DIR_O)/../$(ALT_MOD)
	$(COMPILE.c) $< $(CC_OUTFILE)

$(DIR_O)/../$(ALT_UTILS_MOD)/%$(OBJ_EXT) : $(ALT_UTILS_DIR)/%.c
	@[ -d $(DIR_O)/../$(ALT_UTILS_MOD) ] || $(MKDIR) $(DIR_O)/../$(ALT_UTILS_MOD)
	$(COMPILE.c) $< $(CC_OUTFILE)

$(OBJS_STDC) : $(HOME_TXT)/$$(@F:%$(OBJ_EXT)=%.c)
	$(COMPILE.c) $(HOME_TXT)/$(@F:%$(OBJ_EXT)=%.c) $(CC_OUTFILE)

$(OBJS_STDC_ALT) : ${HOME_ALT_TXT}/$$(@F:%$(OBJ_EXT)=%.c)
	@[ -d $(DIR_O)/../$(STDC_ALT_MOD) ] || $(MKDIR) -p $(DIR_O)/../$(STDC_ALT_MOD)
	$(COMPILE.c) ${HOME_ALT_TXT}/$(@F:%$(OBJ_EXT)=%.c) $(CC_OUTFILE)

$(DIR_O_S)/../$(STDC_ALT_MOD)/%$(OBJ_EXT2) : $(DIR_O)/../$(STDC_ALT_MOD)/%$(OBJ_EXT)
	@[ -d $(DIR_O_S)/../$(STDC_ALT_MOD) ] || $(MKDIR) $(DIR_O_S)/../$(STDC_ALT_MOD)
	$(COMPILE.S) $< $(CC_OUTFILE)

$(DIR_O_S)/../$(ALT_MOD)/%$(OBJ_EXT2) : $(DIR_O)/../$(ALT_MOD)/%$(OBJ_EXT)
	@[ -d $(DIR_O_S)/../$(ALT_MOD) ] || $(MKDIR) $(DIR_O_S)/../$(ALT_MOD)
	$(COMPILE.S) $< $(CC_OUTFILE)

$(DIR_O_S)/../$(ALT_UTILS_MOD)/%$(OBJ_EXT2) : $(DIR_O)/../$(ALT_UTILS_MOD)/%$(OBJ_EXT)
	@[ -d $(DIR_O_S)/../$(ALT_UTILS_MOD) ] || $(MKDIR) $(DIR_O_S)/../$(ALT_UTILS_MOD)
	$(COMPILE.S) $< $(CC_OUTFILE)

$(DIR_O_S)/%$(OBJ_EXT2) : $(DIR_O)/%$(OBJ_EXT)
	@[ -d $(DIR_O_S) ] || $(MKDIR) $(DIR_O_S)
	$(COMPILE.S) $< $(CC_OUTFILE)

DIR_O_STDC = $(DIR_O)/../$(MODNAME)
DIR_O_STDC_ALT  = $(DIR_O)/../$(STDC_ALT_MOD)
DIR_O_ALT  = $(DIR_O)/../$(ALT_MOD)

# Fix bug ID 4224416.
# See mail - Fri, 26 Mar 1999 09:42:40
#$(DIR_O)/mlib_c_ImageZoom_BC.o := CFLAGS_OPTIMIZE_V=-g
#$(DIR_O)/mlib_c_ImageZoomIndex_BC.o := CFLAGS_OPTIMIZE_V=-g

# it seems that is compiler bug
#$(DIR_O)/mlib_c_ImageCrossCorrel.o := CFLAGS_OPTIMIZE_V=-g

# it seems that is SC5.3 (05/15/2001) compiler bug
#$(DIR_O)/mlib_c_ImageStdDev.o := CFLAGS_OPTIMIZE_V=-g

# it seems that is compiler bug
#$(DIR_O)/mlib_c_GraphicsClipTriangleHor_GZ.o := CFLAGS_OPTIMIZE_V=-g

# compiler crush
#$(DIR_O)/mlib_ImageConstDivShift.o := CFLAGS_OPTIMIZE_V=-fast -xO2 -xdepend

# compiler crush
#$(DIR_O)/mlib_c_GraphicsFillEllipse.o := CFLAGS_OPTIMIZE_V=-fast -fsimple=1 -xO3 -xdepend -xrestrict=%all

# protect from incorrect 'float' to 'int' conversion
#$(DIR_O)/mlib_c_ImageDivShiftU8$(OBJ_EXT)         := CFLAGS_OPTIMIZE_V=-fast -fsimple=0 -xO4
#$(DIR_O)/mlib_c_ImageDivAlpha_f$(OBJ_EXT)         := CFLAGS_OPTIMIZE_V=-fast -fsimple=0 -xO4
#$(DIR_O)/mlib_c_ImageDivAlpha_Inp$(OBJ_EXT)       := CFLAGS_OPTIMIZE_V=-fast -fsimple=0 -xO4
#$(DIR_O)/mlib_SignalMelCepstral$(OBJ_EXT)         := CFLAGS_OPTIMIZE_V=-fast -fsimple=0 -xO4
#$(DIR_O)/mlib_c_VideoJFIFYCC2RGB444_S16$(OBJ_EXT) := CFLAGS_OPTIMIZE_V=-fast -fsimple=0 -xO4
