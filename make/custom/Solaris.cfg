#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"@(#)Solaris.cfg	9.7	07/10/29 SMI"
#

# Set the core PROJECT_ variables from their MLIB forms
PROJECT_ROOT  = $(MLIB_HOME)

# Need host architecture for variable names below
HOST_ARCH_NAME=$(HOST_ARCH:-%=%)

# OS description
CONFIG.$(HOST_ARCH_NAME).OS = $(CONFIG_DIR)/os/SunOS5.cfg
TARGET_OS = solaris

#
#
#
CONFIG.$(HOST_ARCH_NAME).PROJECT = $(CONFIG_DIR)/custom/MLIB.cfg

#
# C Compiler config file
#
CONFIG.$(HOST_ARCH_NAME).C = \
                $(CONFIG_DIR)/compilers/Solaris_$(HOST_ARCH_NAME).cfg

#
# The following file is included at end of 'leaf.cfg'
#
CONFIG.$(HOST_ARCH_NAME).OVERRIDES = /dev/null

#
# Make configure
#
CONFIG.sparc.MAKE = /dev/null
#$(CONFIG_DIR)/custom/Solaris_sparc_make.cfg
CONFIG.i386.MAKE = /dev/null

#
# Special SPARC vis/v9 targets.
#
sparc_V9C  = v9c
sparc_V9B  = v9b
sparc_V9A  = v9a
sparc_V9   = v9
sparc_V8PC = v8pc
sparc_V8PB = v8pb
sparc_V8PA = v8pa
sparc_V8P  = v8p
sparc_COM  = v8

sparc_DEBUG_V8PC = debug_v8pc
sparc_DEBUG_V8PB = debug_v8pb
sparc_DEBUG_V8PA = debug_v8pa
sparc_DEBUG_V8P  = debug_v8p
sparc_DEBUG_V9   = debug_v9
sparc_DEBUG_V9A  = debug_v9a
sparc_DEBUG_V9B  = debug_v9b
sparc_DEBUG_V9C  = debug_v9c

sparc_CLEAN_V9C  = clean_v9c
sparc_CLEAN_V9B  = clean_v9b
sparc_CLEAN_V9A  = clean_v9a
sparc_CLEAN_V9   = clean_v9
sparc_CLEAN_V8PC = clean_v8pc
sparc_CLEAN_V8PB = clean_v8pb
sparc_CLEAN_V8PA = clean_v8pa
sparc_CLEAN_V8P  = clean_v8p
sparc_CLEAN_COM  = clean_v8

sparc_CLEAN_DEBUG_V8PC = clean_debug_v8pc
sparc_CLEAN_DEBUG_V8PB = clean_debug_v8pb
sparc_CLEAN_DEBUG_V8PA = clean_debug_v8pa
sparc_CLEAN_DEBUG_V8P  = clean_debug_v8p
sparc_CLEAN_DEBUG_V9 = clean_debug_v9
sparc_CLEAN_DEBUG_V9A  = clean_debug_v9a
sparc_CLEAN_DEBUG_V9B  = clean_debug_v9b
sparc_CLEAN_DEBUG_V9C  = clean_debug_v9c

sparc_V9C_DIR  = sparcv9+vis3
sparc_V9B_DIR  = sparcv9+vis2
sparc_V9A_DIR  = sparcv9+vis
sparc_V9_DIR   = sparcv9
sparc_V8PC_DIR = sparcv8plus+vis3
sparc_V8PB_DIR = sparcv8plus+vis2
sparc_V8PA_DIR = sparcv8plus+vis
sparc_V8P_DIR  = sparcv8plus
sparc_V8_DIR   = sparcv8

sparc_SLIB      = static_lib
sparc_STRIP     = strip_lib

i386_V8   	= i386
i386_V8P	= sse2
i386_V8PA	= i386+sse
i386_V8PB	= i386+sse2
i386_V9		= amd64
i386_V9A	= amd64+sse
i386_V9B	= amd64+sse2

i386_CLEAN_V8	= clean_i386
i386_CLEAN_V8P	= clean_sse2
i386_CLEAN_V8PB	= clean_i386+sse2
i386_CLEAN_V9	= clean_amd64
i386_CLEAN_V9B	= clean_amd64+sse2

i386_V8_DIR	= i386
i386_V8P_DIR	= sse2
i386_V8PA_DIR	= i386+sse
i386_V8PB_DIR	= i386+sse2
i386_V9_DIR   	= amd64
i386_V9A_DIR   	= amd64+sse
i386_V9B_DIR   	= amd64+sse2

USE_EMBEDDED_SUNMATH=NO
# do not use embedded sunmath for AMD64
%amd64		:= USE_EMBEDDED_SUNMATH=NO
%amd64+sse	:= USE_EMBEDDED_SUNMATH=NO
%amd64+sse2	:= USE_EMBEDDED_SUNMATH=NO

i386_SLIB       = static_lib
i386_STRIP      = strip_lib

i386_COM        = x86
i386_CLEAN_COM  = clean_x86

CHIP_DIR_V = $($(TARCH)_V8_DIR)
CHIP_DIR=$(CHIP_DIR_V)

#
# i-files targets
#
sparc_PREPROC_V9C  = pre_v9c
sparc_PREPROC_V9B  = pre_v9b
sparc_PREPROC_V9A  = pre_v9a
sparc_PREPROC_V9   = pre_v9
sparc_PREPROC_V8PC = pre_v8pc
sparc_PREPROC_V8PB = pre_v8pb
sparc_PREPROC_V8PA = pre_v8pa
sparc_PREPROC_V8P  = pre_v8p

sparc_CLEAN_PREPROC_V9C  = clean_pre_v9c
sparc_CLEAN_PREPROC_V9B  = clean_pre_v9b
sparc_CLEAN_PREPROC_V9A  = clean_pre_v9a
sparc_CLEAN_PREPROC_V9   = clean_pre_v9
sparc_CLEAN_PREPROC_V8PC = clean_pre_v8pc
sparc_CLEAN_PREPROC_V8PB = clean_pre_v8pb
sparc_CLEAN_PREPROC_V8PA = clean_pre_v8pa
sparc_CLEAN_PREPROC_V8P  = clean_pre_v8p

#
# lint targets
#
sparc_LINT_V9C  = lint_v9c
sparc_LINT_V9B  = lint_v9b
sparc_LINT_V9A  = lint_v9a
sparc_LINT_V9   = lint_v9
sparc_LINT_V8PA = lint_v8pa
sparc_LINT_V8PB = lint_v8pb
sparc_LINT_V8PC = lint_v8pc
sparc_LINT_V8P  = lint_v8p

sparc_CLEAN_LINT_V9B  = clean_lint_v9b
sparc_CLEAN_LINT_V9C  = clean_lint_v9c
sparc_CLEAN_LINT_V9A  = clean_lint_v9a
sparc_CLEAN_LINT_V9   = clean_lint_v9
sparc_CLEAN_LINT_V8PC = clean_lint_v8pc
sparc_CLEAN_LINT_V8PB = clean_lint_v8pb
sparc_CLEAN_LINT_V8PA = clean_lint_v8pa
sparc_CLEAN_LINT_V8P  = clean_lint_v8p

#
# tcov targets
#
sparc_TCOV_V9C  = tcov_v9c
sparc_TCOV_V9B  = tcov_v9b
sparc_TCOV_V9A  = tcov_v9a
sparc_TCOV_V9   = tcov_v9
sparc_TCOV_V8PA = tcov_v8pa
sparc_TCOV_V8PC = tcov_v8pc
sparc_TCOV_V8PB = tcov_v8pb
sparc_TCOV_V8P  = tcov_v8p

sparc_CLEAN_TCOV_V9C  = clean_tcov_v9c
sparc_CLEAN_TCOV_V9B  = clean_tcov_v9b
sparc_CLEAN_TCOV_V9A  = clean_tcov_v9a
sparc_CLEAN_TCOV_V9   = clean_tcov_v9
sparc_CLEAN_TCOV_V8PB = clean_tcov_v8pb
sparc_CLEAN_TCOV_V8PC = clean_tcov_v8pc
sparc_CLEAN_TCOV_V8PA = clean_tcov_v8pa
sparc_CLEAN_TCOV_V8P  = clean_tcov_v8p

#
# Attach platform specific prefix for library name
#
LIB_LIBNAME = lib$(LIBNAME)

#
# Some Platform-Specific Definitions go here...
#
MLIB_DEFINES=

SPECIAL_sparc_MLIB_DEFINES=-D_NO_LONGLONG -DMLIB_USE_FTOI_CLAMPING
SPECIAL_sparc_V8P_MLIB_DEFINES= -DMLIB_USE_FTOI_CLAMPING
SPECIAL_sparc_V8PA_MLIB_DEFINES= -DMLIB_USE_FTOI_CLAMPING -DMLIB_VIS=0x100
SPECIAL_sparc_V8PB_MLIB_DEFINES= -DVIS=0x200 -DMLIB_VIS=0x200
SPECIAL_sparc_V8PC_MLIB_DEFINES= -DMLIB_USE_FTOI_CLAMPING -DVIS=0x300 -DMLIB_VIS=0x300
SPECIAL_sparc_V9_MLIB_DEFINES= -DMLIB_USE_FTOI_CLAMPING
SPECIAL_sparc_V9A_MLIB_DEFINES= -DMLIB_USE_FTOI_CLAMPING -DMLIB_VIS=0x100
SPECIAL_sparc_V9B_MLIB_DEFINES= -DVIS=0x200 -DMLIB_VIS=0x200
SPECIAL_sparc_V9C_MLIB_DEFINES= -DMLIB_USE_FTOI_CLAMPING -DVIS=0x300 -DMLIB_VIS=0x300

SPECIAL_i386_MLIB_DEFINES=-D_NO_LONGLONG

MLIB_DEFINES += $(SPECIAL_$(TARCH)_MLIB_DEFINES)

TODAY: sh=date '+%Y''%m%d'
VERSION_INFO="mediaLib:$(MLIB_VERS):$(TODAY)"

SPECIAL_POSSIBILITES_V_TMP = echo $$PWD       |   \
              sed -e "s@.*\(sse\).*@\1@"  |   \
              sed -e "s@.*\(mmx\).*@\1@"  |   \
              sed -e "s@.*\(stdc\).*@\1@" |   \
              sed -e "s@\<$$PWD\>@stdc@"

SPECIAL_POSSIBILITES_V = $(SPECIAL_POSSIBILITES_V_TMP:sh)
SPECIAL_POSSIBILITES   = $(SPECIAL_POSSIBILITES_V)

include $(PROJECT_ROOT)/make/custom/Solaris_$(SPECIAL_POSSIBILITES).cfg

DIR_MODE        = obj

DIR_O_V9C       = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9C_DIR)/$(MODNAME)
DIR_O_V9B       = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9B_DIR)/$(MODNAME)
DIR_O_V9A       = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9A_DIR)/$(MODNAME)
DIR_O_V9        = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9_DIR)/$(MODNAME)
DIR_O_V8PLUSC   = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PC_DIR)/$(MODNAME)
DIR_O_V8PLUSB   = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PB_DIR)/$(MODNAME)
DIR_O_V8PLUSA   = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PA_DIR)/$(MODNAME)
DIR_O_V8PLUS    = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8P_DIR)/$(MODNAME)
DIR_O_V8        = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8_DIR)/$(MODNAME)

DIR_SYS_V9B     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9B_DIR)/sys
DIR_SYS_V9C     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9C_DIR)/sys
DIR_SYS_V9A     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9A_DIR)/sys
DIR_SYS_V9      = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9_DIR)/sys
DIR_SYS_V8PLUSC = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PC_DIR)/sys
DIR_SYS_V8PLUSB = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PB_DIR)/sys
DIR_SYS_V8PLUSA = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PA_DIR)/sys
DIR_SYS_V8PLUS  = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8P_DIR)/sys
DIR_SYS_V8      = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8_DIR)/sys

DIR_GRAPHICS_V9B     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9B_DIR)/graphics
DIR_GRAPHICS_V9C     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9C_DIR)/graphics
DIR_GRAPHICS_V9A     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9A_DIR)/graphics
DIR_GRAPHICS_V9      = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V9_DIR)/graphics
DIR_GRAPHICS_V8PLUSC = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PC_DIR)/graphics
DIR_GRAPHICS_V8PLUSB = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PB_DIR)/graphics
DIR_GRAPHICS_V8PLUSA = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8PA_DIR)/graphics
DIR_GRAPHICS_V8PLUS  = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8P_DIR)/graphics
DIR_GRAPHICS_V8      = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/$(DIR_MODE)/$($(TARCH)_V8_DIR)/graphics

LIB_DIR_V9B     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V9B_DIR)
LIB_DIR_V9C     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V9C_DIR)
LIB_DIR_V9A     = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V9A_DIR)
LIB_DIR_V9      = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V9_DIR)
LIB_DIR_V8PLUSC = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V8PC_DIR)
LIB_DIR_V8PLUSB = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V8PB_DIR)
LIB_DIR_V8PLUSA = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V8PA_DIR)
LIB_DIR_V8PLUS  = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V8P_DIR)
LIB_DIR_V8      = $(TOP_DIR)/builds/$(TARGET_OS)/$(ARCH)/lib/$($(TARCH)_V8_DIR)

DIR_O           = $(DIR_O_V)
DIR_SYS         = $(DIR_SYS_V)
DIR_GRAPHICS    = $(DIR_GRAPHICS_V)
DIR_S           = $(DIR_S_V)
DIR_O_S         = $(DIR_O_S_V)
LIB_DIR         = $(LIB_DIR_V)

#
# Object file extension
#
OBJ_EXT=.o

# Shared library extension
SHAREDLIB_EXT=.so

#Static library extension
STATICLIB_EXT=.a

# Exclude GNU make specific targets
POUND_SIGN:sh=echo \\043
USE_GNU_MAKE=$(POUND_SIGN)
