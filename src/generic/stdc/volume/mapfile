#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"@(#)mapfile	9.2	07/10/09 SMI"
#

SUNW_2.0 {
    global:
        mlib_VolumeRayCast_General_Parallel_Nearest_U8_U8;
        mlib_VolumeRayCast_General_Parallel_Trilinear_U8_U8;
        mlib_VolumeRayCast_General_Parallel_Nearest_S16_S16;
        mlib_VolumeRayCast_General_Parallel_Trilinear_S16_S16;
        mlib_VolumeRayCast_General_Divergent_Nearest_U8_U8;
        mlib_VolumeRayCast_General_Divergent_Trilinear_U8_U8;
        mlib_VolumeRayCast_General_Divergent_Nearest_S16_S16;
        mlib_VolumeRayCast_General_Divergent_Trilinear_S16_S16;
        mlib_VolumeRayCast_Blocked_Parallel_Nearest_U8_U8;
        mlib_VolumeRayCast_Blocked_Parallel_Trilinear_U8_U8;
        mlib_VolumeRayCast_Blocked_Parallel_Nearest_S16_S16;
        mlib_VolumeRayCast_Blocked_Parallel_Trilinear_S16_S16;
        mlib_VolumeRayCast_Blocked_Divergent_Nearest_U8_U8;
        mlib_VolumeRayCast_Blocked_Divergent_Trilinear_U8_U8;
        mlib_VolumeRayCast_Blocked_Divergent_Nearest_S16_S16;
        mlib_VolumeRayCast_Blocked_Divergent_Trilinear_S16_S16;
        mlib_VolumeRayCast_General_Parallel_Nearest_U8_Bit;
        mlib_VolumeRayCast_General_Divergent_Nearest_U8_Bit;
        mlib_VolumeWindowLevel;
        mlib_VolumeFindMax_U8;
        mlib_VolumeFindMax_S16;
        mlib_VolumeFindMaxCMask_U8;
        mlib_VolumeFindMaxCMask_S16;
        mlib_VolumeFindMaxBMask_U8;
        mlib_VolumeFindMaxBMask_S16;
    local:
        *;
};

SUNWprivate_2.2 {
    global:
        __mlib_VolumeRayCast_General_Parallel_Nearest_U8_U8;
        __mlib_VolumeRayCast_General_Parallel_Trilinear_U8_U8;
        __mlib_VolumeRayCast_General_Parallel_Nearest_S16_S16;
        __mlib_VolumeRayCast_General_Parallel_Trilinear_S16_S16;
        __mlib_VolumeRayCast_General_Divergent_Nearest_U8_U8;
        __mlib_VolumeRayCast_General_Divergent_Trilinear_U8_U8;
        __mlib_VolumeRayCast_General_Divergent_Nearest_S16_S16;
        __mlib_VolumeRayCast_General_Divergent_Trilinear_S16_S16;
        __mlib_VolumeRayCast_Blocked_Parallel_Nearest_U8_U8;
        __mlib_VolumeRayCast_Blocked_Parallel_Trilinear_U8_U8;
        __mlib_VolumeRayCast_Blocked_Parallel_Nearest_S16_S16;
        __mlib_VolumeRayCast_Blocked_Parallel_Trilinear_S16_S16;
        __mlib_VolumeRayCast_Blocked_Divergent_Nearest_U8_U8;
        __mlib_VolumeRayCast_Blocked_Divergent_Trilinear_U8_U8;
        __mlib_VolumeRayCast_Blocked_Divergent_Nearest_S16_S16;
        __mlib_VolumeRayCast_Blocked_Divergent_Trilinear_S16_S16;
        __mlib_VolumeRayCast_General_Parallel_Nearest_U8_Bit;
        __mlib_VolumeRayCast_General_Divergent_Nearest_U8_Bit;
        __mlib_VolumeWindowLevel;
        __mlib_VolumeFindMax_U8;
        __mlib_VolumeFindMax_S16;
        __mlib_VolumeFindMaxCMask_U8;
        __mlib_VolumeFindMaxCMask_S16;
        __mlib_VolumeFindMaxBMask_U8;
        __mlib_VolumeFindMaxBMask_S16;
};
